{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifts.jsx","components/GiftsGridItem.jsx","components/GifGrid.jsx","components/hooks/useFetchGifts.jsx","GifExpertApp.jsx","App.jsx","index.js"],"names":["AddCategory","setCategories","React","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","response","json","data","gifts","map","img","id","title","images","downsized_medium","GiftsGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifts","console","log","GifExpertApp","App","ReactDOM","render","document","getElementById"],"mappings":"0MAsCeA,EAnCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACnB,EAAoCC,IAAMC,SAAS,IAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBC,OACI,sBAAMC,SAfU,SAACC,GACjBA,EAAEC,iBAQEJ,EAAWK,OAAOC,OAAS,IAC3BT,GAAe,SAAAU,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAvBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCNjBG,EAAQ,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAUH,GAF3C,+DAGEI,MAAMF,GAHR,cAGfG,EAHe,gBAIAA,EAASC,OAJT,uBAIdC,EAJc,EAIdA,KAEDC,EAAQD,EAAKE,KAAI,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVpB,kBAcdM,GAdc,4CAAH,sDCYPO,G,MAVO,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE3B,OACI,sBAAKc,UAAU,wCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,SC8BDO,EAlCC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEd,ECCyB,SAACA,GAC1B,MAA2Bf,IAAMC,SAAS,CACtCqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA8BA,OArBArC,IAAMsC,WAAU,WACZxB,EAASC,GAAUwB,MAAK,SAAAC,GACpBH,EAAS,CACJf,KAAKkB,EACLL,SAAS,UAiBfC,EDhCyBK,CAAc1B,GAAjCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAIrB,OAFAO,QAAQC,IAAIR,GAGR,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAG7CoB,GAAW,mBAAGJ,UAAU,mCAAb,sBAEhB,qBAAKA,UAAU,YAAf,SAEWH,EAAOJ,KAAI,SAAAC,GACP,OAAO,cAAC,EAAD,eAESA,GADCA,EAAIC,aEW9BkB,EA5BM,WAIjB,MAAoC5C,IAAMC,SAAS,CAAC,UAApD,mBAAOQ,EAAP,KAAmBV,EAAnB,KAMA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACUU,EAAWe,KAAI,SAACT,GAChB,OAAQ,cAAC,EAAD,CAENA,SAAUA,GADLA,YCXd8B,MARf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,cAAC,EAAD,OCDNe,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.ee6bb261.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n   const [inputValue, setInputValue] = React.useState('')\r\n\r\n   const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n   }\r\n\r\n   const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        // console.log('Submit hecho')\r\n\r\n         /* trim().length > 2 = borra los espacios vacios antes y despues y luego hacer la validacion.\r\n         setCategories() = agrega lo que haya en inputValue al array de categories junto con una copia de categories\r\n         tambien. setInputValue('') = Para no hacer un doble posteo mandamos un string vacio.\r\n         [inputValue, ...categories] = Ponemos inputValue delante para muestre los datos nuevos primero */\r\n\r\n         if(inputValue.trim().length > 2) {\r\n            setCategories( categories => [ inputValue, ...categories])\r\n            setInputValue('')\r\n        }\r\n   }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n // haciendo que setCategories sea obligatorio como argumento en las props de este componente, AddCategory\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\nexport default AddCategory\r\n","\r\n export const getGifts = async(category) => {\r\n     /* encodeURI = para quitar los espacios */\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=rg2K9YervftsIwlY3u2LpPTTLbr5htFO`\r\n    const response = await fetch(url) // llamada a la url\r\n    const {data} = await response.json() // extrayendo el parametro data de la respuesta, ese parametro contiene todo la info de los gifts\r\n\r\n    const gifts = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifts\r\n}","import React from 'react'\r\nimport 'animate.css'\r\n\r\nconst GiftsGridItem = ({title, url}) => {\r\n    // console.log(img)\r\n    return (\r\n        <div className=\"card animate__animated.animate__flash\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GiftsGridItem\r\n","import React from 'react'\r\nimport { useFetchGifts } from './hooks/useFetchGifts'\r\nimport GiftsGridItem from './GiftsGridItem'\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data: images, loading} = useFetchGifts(category)\r\n\r\n    console.log(loading);\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated.animate__fadeIn\">{category}</h3>\r\n\r\n            {/* {loading ? 'Cargando...' : 'data cargada'} */}\r\n            { loading && <p className=\"animate__animated.animate__flash\">Cargando</p>}\r\n\r\n         <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => {\r\n                        return <GiftsGridItem\r\n                                    key={img.id}\r\n                                    {...img}\r\n                                />\r\n                    })\r\n                }\r\n        </div>\r\n          {/* images.map(img => {\r\n                     return   <GiftsGridItem\r\n                                key={img.id}\r\n                                img={img}\r\n                               />\r\n                    }) */}\r\n                {/* images.map( ({id, title}) => ( <li key={id}>{title}</li>)) */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import React from 'react';\r\nimport { getGifts } from '../../helpers/getGifts';\r\n\r\n/* custom hook para cargar automaticamente las busquedas de gifts\r\n   lo que hacemos es que cuando se cargue el componente por primera vez\r\n   hace una peticion para obtener los gifts y los coloca en las images */\r\n\r\nexport const useFetchGifts = (category) => {\r\n    const [state, setState ] = React.useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n/*\r\n    en el useEffect = llamada fetch en el componente getGifts.\r\n                      con .then le pasamos las imgs que recibimos de category y las\r\n                      pasamos al state en data y poniendo loading en false, porque ya se ha hecho la carga.\r\n*/\r\n    React.useEffect(() => {\r\n        getGifts(category).then(imgs => {\r\n            setState({\r\n                 data:imgs,\r\n                 loading: false\r\n            })\r\n        })\r\n    })\r\n\r\n    // React.useEffect(() => {\r\n    //     getGifts(category)\r\n    //     .then(imgs => {\r\n    //             setTimeout(() => {\r\n    //                 setState({\r\n    //                     data: imgs,\r\n    //                     loading: false,\r\n    //                 })\r\n    //             }, 3000)\r\n    //     });\r\n    // }, [category ])\r\n\r\n    return state\r\n}","import React from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n   // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n\r\n    const [categories, setCategories] = React.useState(['Zelda'])\r\n\r\n    // const handleApp = () => {\r\n    //    // setCategories([...categories, 'HunterXHunter'])\r\n    //    setCategories( categories => [...categories, 'HunterXHunter']) // callBack donde el primer argumento es el valor del estado inicial y luego regresa el nuevo estado\r\n    // }\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                    { categories.map((category) => {\r\n                      return  <GifGrid\r\n                        key={category}\r\n                        category={category}\r\n                        />\r\n                      })\r\n                    }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import './index.css'\nimport GifExpertApp from './GifExpertApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GifExpertApp />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}